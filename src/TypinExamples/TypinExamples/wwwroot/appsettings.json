{
  "Application": {
    "Name": "TypinExamples",
    "LogoPath": "assets/images/typin-examples-logo/typinexamples-logo-512px.png",
    "Description": [
      "<div class=\"text-accent\">",
      "",
      "**Welcome to TypinExamples** - a web application written in Blazor that serves examples of CLI tools written in **Typin**.",
      "",
      "</div>",
      "<div class=\"text-light\">",
      "",
      "The **Typin** library is a framework for building tool and interactive command-line (CLI) applications using **.NET 5**, **.NET Standard 2.1**, and **.NET Standard 2.0**.",
      "It is a simple to use, ASP.NET Core inspired framework for building both interactive command line applications and command line tools.",
      "",
      "**Typin** is not just a parser but a complete application framework. Its main goal is to provide an enjoyable, similar to ASP.NET Core, development experience when building command line applications. Its primary goal is to completely take over the user input layer, letting you forget about the infrastructure and instead focus on writing your application.",
      "",
      "</div>"
    ],
    "ToastDuration": 6
  },
  "Header": {
    "IsFullScreen": false,
    "Heading": "A **Typin** interactive examples page.",
    "Subheading": [
      "<i class=\"fas fa-comment-dots fa-sm\"></i> <small>*Typin* is pronounced as /*Type in*/</small>",
      "",
      "<i class=\"fas fa-signature fa-sm\"></i> <small>\"Typin\" == \"Type interactively\"</small>"
    ],
    "Links": [
      {
        "Title": "<i class=\"fas fa-stream\"></i> Examples",
        "IsHtmlTitle": true
      },
      {
        "Href": "https://github.com/adambajguz/Typin",
        "Title": "<i class=\"fab fa-github\"></i> Typin@GitHub",
        "IsHtmlTitle": true,
        "IsExternal": true
      },
      {
        "Href": "https://github.com/adambajguz/Typin/wiki",
        "Title": "<i class=\"fas fa-book\"></i> Wiki",
        "IsHtmlTitle": true,
        "IsExternal": true
      }
    ]
  },
  "Footer": {
    "Authors": "Made by [Adam Bajguz](https://github.com/adambajguz/), [Paweł Halicki](https://github.com/Hamis132), [Michał Kierzkowski](https://github.com/michal0929) & [Alan Bednarczyk](https://github.com/speednow)",
    "Links": [
      {
        "Href": "https://github.com/adambajguz/Typin/issues",
        "Title": "<span class=\"text-error\"><i class=\"fas fa-bug\"></i> Report an issue</span>",
        "IsHtmlTitle": true,
        "IsExternal": true
      },
      {
        "Href": "https://github.com/adambajguz/Typin",
        "Title": "<span class=\"text-grey\"><i class=\"fab fa-github\"></i> Typin@GitHub</span>",
        "IsHtmlTitle": true,
        "IsExternal": true
      },
      {
        "Href": "https://github.com/adambajguz/Typin/wiki",
        "Title": "<span class=\"text-grey\"><i class=\"fas fa-book\"></i> Wiki</span>",
        "IsHtmlTitle": true,
        "IsExternal": true
      }
    ]
  },
  "Examples": {
    "Descriptors": [
      {
        "Key": "hello-world",
        "Name": "HelloWorld",
        "IsNew": false,
        "Modes": [ "Direct" ],
        "DownloadPath": "assets/files/TypinExamples.HelloWorld.zip",
        "ProgramClass": "TypinExamples.HelloWorld.Program, TypinExamples.HelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "WebProgramClass": "TypinExamples.HelloWorld.WebProgram, TypinExamples.HelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "Description": "**HelloWorld example is a simple application that demostrates core Typin constructs**, i.e., commands, parameters, and options. Additionaly, this example shows logging subsystem of **Typin**, which is build using [Microsoft.Extensions.Logging](https://www.nuget.org/packages/Microsoft.Extensions.Logging/). Due to the fact that **TypinExamples** is a web app, it emulates Terminal experience and provides a log viewer, as well as a file browser (*under construction*) and source code download option.",
        "QuickStart": [
          "<br>**Typin** is a simple to use, yet powerful framework for building both interactive command line applications and command line tools. It is build based on the source code of [CliFx](https://github.com/Tyrrrz/CliFx), but it wants to be a ASP.NET Core for CLI like [Cocona](https://github.com/mayuki/Cocona) but faster. It has many additional features compared to CliFx [> see README.md](https://github.com/adambajguz/Typin/blob/master/README.md).",
          "",
          "It supports an argument syntax which is based on the [POSIX standard](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html). To be fair, nobody really knows what the standard is about and very few tools actually follow it to the letter, so for the purpose of having dashes and spaces, Typin is using the \"standard command line syntax\".",
          "Order of arguments is semantically important and it always goes like this:",
          "",
          "`{directives} {command name} {parameters} {options}`",
          "",
          "---",
          "",
          "++**Commands:**++",
          "",
          "**HelloWorld** example defines 3 commands in the app:",
          " ",
          " - ` ` - in Typin command without name is treated as a default command. In this example default command can be executed with and withoud extra options.",
          " - `world` - is just a simple named command that prints text.",
          " - `world end` - `end` subcommand for `world` command demonstrates date parsing, parameters and required options. Try to execute `world end \"2048/16/8 04:02\" --CONFIRM true`.",
          " ",
          " > Every Typin application has two special options `--help` / `-h` and `--version`. The first one can be added to every command to print a help screen, while the second (`--version`) can be executed only on default command.",
          "",
          "---",
          "",
          "++**Directives:**++",
          "",
          "An extra feature that can be added to every **Typin** application are directives. The most basic example of directive is `[preview]` directive, which is very useful in troubleshooting issues. If preview mode is specified (using the [preview] directive), the app will short-circuit by printing consumed command line arguments as they were parsed. This is useful when troubleshooting issues related to command routing and argument binding."
        ]
      },
      {
        "Key": "calculator",
        "Name": "CalculatOR",
        "IsNew": false,
        "Modes": [ "Direct" ],
        "DownloadPath": "assets/files/TypinExamples.CalculatOR.zip",
        "ProgramClass": "TypinExamples.CalculatOR.Program, TypinExamples.CalculatOR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "WebProgramClass": "TypinExamples.CalculatOR.WebProgram, TypinExamples.CalculatOR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "Description": "Simple calculator CLI tool with arithemtic and logical operations on one, two, or multiple numbers (depends on command) with optional step-by-step visualization. **CalculatOR** supports three number notations for three different systems: *decimal* (e.g., -11 or 72), *hexadecimal* (e.g., 0x8A), and *binary* (e.g., 0b11001). Thanks to the build into **Typin** [dependency injection](https://github.com/adambajguz/Typin/wiki/Dependency-injection) via [Microsoft.Extensions.DependencyInjection](https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/) support that is used accross entire framework, writing clean and advanced CLI tools is very fast and easy.",
        "QuickStart": [
          "<br> ",
          "**CalculatOR example** implements the following set of mathematical operations:",
          "",
          "- `add`         - Adds two or more numbers.",
          "- `and`         - Performs a logical 'AND' operation on two or more numbers.",
          "- `divide`      - Divides two or more number by each other.",
          "- `interactive` - Starts an interactive mode.",
          "- `lsh`         - Performs a logic left shift by 'n' bits.",
          "- `multiply`    - Multiplies two or more numbers.",
          "- `nand`        - Performs a logical 'NAND' operation on two or more numbers.",
          "- `nor`         - Performs a logical 'NOR' operation on two or more numbers.",
          "- `not`         - Performs a logical 'NOT' operation on a number.",
          "- `or`          - Performs a logical 'OR' operation on two or more numbers.",
          "- `rsh`         - Performs a logic right shift by 'n' bits.",
          "- `subtract`    - Subtracts tow or more numbers.",
          "- `xnor`        - Performs a logical 'XNOR' operation on two or more numbers.",
          "- `xor`         - Performs a logical 'XOR' operation on two or more numbers.",
          "- `pipeline`    - Prints a middleware pipeline structure in application.",
          "- `services`    - Prints a list of registered services in application.",
          "",
          " > As you might have noticed, at he bottom od the above list there are two commands (`pipeline`, `services`) that seem not to be related to maths. Those commands can be added and used in development stage to print [registred services](https://github.com/adambajguz/Typin/wiki/Dependency-injection) and [middleware pipeline](https://github.com/adambajguz/Typin/wiki/Middleware-pipeline) in the form of table using [TableUtils](https://github.com/adambajguz/Typin/wiki/Utilities-TableUtils).",
          "",
          "_**Example commands:**_:",
          "`add 0x15 5 2 1 0xFA 0b110111`",
          "`rsh 0x15 -n 3 -base BIN`"
        ]
      },
      {
        "Key": "timer",
        "Name": "Timer",
        "IsNew": true,
        "Modes": [ "Direct", "Interactive" ],
        "DownloadPath": "assets/files/TypinExamples.Timer.zip",
        "ProgramClass": "TypinExamples.Timer.Program, TypinExamples.Timer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "WebProgramClass": "TypinExamples.Timer.WebProgram, TypinExamples.Timer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "Description": "TypinExamples.Timer.Program, TypinExamples.Timer, Version=1.0.0.0",
        "QuickStart": [
          "TypinExamples.Timer.Program, QuickStartTypinExamples.Timer, Version=1.0.0.0",
          "",
          "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget efficitur lectus. Vivamus dapibus at ex eget vulputate. Etiam dui est, pretium eu diam ac, pellentesque egestas risus.",
          "Mauris nisi neque, porta ac porta commodo, vulputate non felis. Mauris ante turpis, gravida rutrum mi vel, aliquet tincidunt diam. Vestibulum pulvinar tempor enim eget viverra",
          "Phasellus eros lectus, pharetra pharetra risus et, aliquet tristique odio."
        ]
      },
      {
        "Key": "validation",
        "Name": "Validation",
        "IsNew": true,
        "Modes": [ "Direct", "Interactive" ],
        "DownloadPath": "assets/files/TypinExamples.Validation.zip",
        "ProgramClass": "TypinExamples.Validation.Program, TypinExamples.Validation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "WebProgramClass": "TypinExamples.Validation.WebProgram, TypinExamples.Validation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "Description": "TypinExamples.Validation.Program, TypinExamples.Validation, Version=1.0.0.0",
        "QuickStart": [
          "TypinExamples.Validation.Program, QuickStartTypinExamples.Validation, Version=1.0.0.0",
          "",
          "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget efficitur lectus. Vivamus dapibus at ex eget vulputate. Etiam dui est, pretium eu diam ac, pellentesque egestas risus.",
          "Mauris nisi neque, porta ac porta commodo, vulputate non felis. Mauris ante turpis, gravida rutrum mi vel, aliquet tincidunt diam. Vestibulum pulvinar tempor enim eget viverra",
          "Phasellus eros lectus, pharetra pharetra risus et, aliquet tristique odio."
        ]
      }
    ]
  }
}
