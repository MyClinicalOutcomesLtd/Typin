@implements IWebLoggerDestination

<div class="m-log-viewer overflow">
    <table class="striped condensed">
        <caption class="text-right text-primary">
            (Total: @logs.Count)
        </caption>
        <thead class="text-uppercase text-small">
            <tr>
                <th>Time</th>
                <th>Level</th>
                <th>Category</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="@logs">
                <ItemContent>
                    <tr>
                        <td class="text-grey no-wrap">@context.TimestampUtc.ToLocalTime().ToString("T")</td>
                        <td class="no-wrap @HtmlHelpers.GetLogLevelCSSClasses(context.Level)">@HtmlHelpers.GetLogLevelAlias(context.Level)</td>
                        <td class="text-grey break-anywhere">@context.Category</td>
                        <td class="break-anywhere">
                            @{
                                string[] lines = context.Text?.Split(Environment.NewLine) ?? Array.Empty<string>();

                                @foreach (string line in lines)
                                {
                                    @line
                                    if (lines.Last() != line)
                                    {
                                        <br />
                                    }
                                }
                            }
                        </td>
                    </tr>
                </ItemContent>
                <Placeholder>
                    <tr>
                        <td>Empty.</td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </Placeholder>
            </Virtualize>
        </tbody>
    </table>
</div>

@code {
    private LinkedList<LogEntry> logs = new();

    [Inject] private IToastService ToastService { get; init; } = default!;

    void IWebLoggerDestination.WriteLog(LogEntry entry)
    {
        logs.AddLast(entry);
        StateHasChanged();

        if (entry.Level >= Microsoft.Extensions.Logging.LogLevel.Error)
        {
            string[] lines = entry.Text?.Split(Environment.NewLine) ?? Array.Empty<string>();

            RenderFragment message =
                @<text>
                    <b>@HtmlHelpers.GetLogLevelAlias(entry.Level): </b>

                    @foreach (string line in lines)
                    {
                        @line
                        if (lines.Last() != line)
                        {
                            <br />
                        }
                    }

                </text>;

            ToastService.ShowError(message, "Typin Log Viewer");
        }
    }
}
